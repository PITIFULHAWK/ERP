model User {
  id                   String              @id @default(uuid())
  name                 String
  email                String              @unique
  role                 UserRole            @default(USER)
  joinedAt             DateTime            @default(now())
  hostelId             String?
  coursePayStatus      CoursePaymentStatus @default(NOT_VERIFIED)
  hostelPayStatus      HostelPaymentStatus @default(NOT_VERIFIED)
  userStatus           UserStatus          @default(NOT_VERIFIED)
  universityId         String
  applicationId        String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  password             String
  Application          Application?
  verifiedApplications Application[]       @relation("VerifiedApplications")
  verifiedDocuments    Document[]          @relation("VerifiedDocuments")
  verifiedPayments     Payment[]           @relation("VerifiedPayments")
  examResults          ExamResult[]        @relation("examResults")
  payments             Payment[]
  receipts             Receipt[]
  application          Application?        @relation("userApplication", fields: [applicationId], references: [id], onDelete: SetNull)
  hostelOpted          Hostel?             @relation("UserHostel", fields: [hostelId], references: [id], onDelete: SetNull)
  university           University          @relation(fields: [universityId], references: [id], onDelete: Restrict)
  
  // New relationships for enrollment and attendance
  enrollments          StudentEnrollment[] @relation("StudentEnrollments")
  
  // Professor attendance marking (who marked attendance)
  markedAttendances    Attendance[]        @relation("MarkedAttendances")
  
  // Live class relationships
  instructorLiveClasses LiveClass[]        @relation("InstructorLiveClasses")
  
  // Section relationships
  sectionEnrollments    SectionEnrollment[] @relation("StudentSectionEnrollments")
  professorSectionAssignments ProfessorSectionAssignment[] @relation("ProfessorSectionAssignments")
  uploadedSectionResources SectionResource[] @relation("UploadedSectionResources")

  // Complaint relationships
  studentComplaints     Complaint[]         @relation("StudentComplaints")
  resolvedComplaints    Complaint[]         @relation("ResolvedComplaints")
  assignedComplaints    Complaint[]         @relation("AssignedComplaints")
  complaintUpdates      ComplaintUpdate[]   @relation("ComplaintUpdates")

  @@map("users")
}

enum UserRole {
  USER
  STUDENT
  PROFESSOR
  ADMIN
  VERIFIER
}

enum CoursePaymentStatus {
  VERIFIED
  NOT_VERIFIED
}

enum HostelPaymentStatus {
  VERIFIED
  NOT_VERIFIED
}

enum UserStatus {
  VERIFIED
  NOT_VERIFIED
}
