// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model University {
  id       String    @id @default(uuid())
  name     String
  uid      Int       @unique
  users    User[]
  courses  Course[]
  hostels  Hostel[]
  notices  Notice[]
  @@map("universities")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  role          UserRole  @default(USER)
  joinedAt      DateTime  @default(now())
  coursesOpted  Course[]  @relation("UserCourses")
  hostelOpted   Hostel?   @relation("UserHostel", fields: [hostelId], references: [id])
  hostelId      String?
  coursePayStatus CoursePaymentStatus @default(NOT_VERIFIED)
  hostelPayStatus HostelPaymentStatus @default(NOT_VERIFIED)
  enumStatus    UserStatus @default(NOT_VERIFIED)
  university    University @relation(fields: [universityId], references: [id])
  universityId  String
  application   Application?

  verifiedApplications Application[] @relation("VerifiedApplications")
  verifiedDocuments    Document[]    @relation("VerifiedDocuments")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@map("users")
}

model Application {
  id                    String               @id @default(uuid())
  firstName             String
  lastName              String
  dateOfBirth           DateTime
  gender                Gender
  nationality           String
  phoneNumber           String
  alternatePhoneNumber  String?
  address               String
  city                  String
  state                 String
  pincode               String

  class10Percentage     Float
  class10Board          String
  class10YearOfPassing  Int
  class12Percentage     Float
  class12Board          String
  class12YearOfPassing  Int
  class12Stream         String               // Science, Commerce, Arts
  
  // JEE Information (optional)
  hasJeeMainsScore      Boolean              @default(false)
  jeeMainsScore         Int?
  jeeMainsRank          Int?
  jeeMainsYear          Int?
  preferredCourse       Course               @relation(fields: [preferredCourseId], references: [id])
  preferredCourseId     String
  documents             Document[]
  status                ApplicationStatus    @default(PENDING)
  verifiedBy            User?                @relation("VerifiedApplications", fields: [verifiedById], references: [id])
  verifiedById          String?
  verifiedAt            DateTime?
  verificationNotes     String?
  rejectionReason       String?
  user                  User                 @relation(fields: [userId], references: [id])
  userId                String               @unique
  
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  
  @@map("applications")
}

model Document {
  id            String        @id @default(uuid())
  type          DocumentType
  fileName      String
  fileUrl       String        // URL to the uploaded document
  fileSize      Int           // File size in bytes
  mimeType      String
  application   Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  isVerified    Boolean       @default(false)
  verifiedBy    User?         @relation("VerifiedDocuments", fields: [verifiedById], references: [id])
  verifiedById  String?
  verifiedAt    DateTime?
  
  uploadedAt    DateTime      @default(now())
  
  @@map("documents")
}

model Hostel {
  id                    String  @id @default(uuid())
  name                  String
  fees                  Float
  totalCapacity         Int
  currentTotalStudents  Int     @default(0)
  type                  HostelType
  university            University @relation(fields: [universityId], references: [id])
  universityId          String
  users                 User[]  @relation("UserHostel")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  @@map("hostels")
}

model Notice {
  id           String     @id @default(uuid())
  title        String
  content      String
  publishedAt  DateTime   @default(now())
  university   University @relation(fields: [universityId], references: [id])
  universityId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  @@map("notices")
}
model Course {
  id              String     @id @default(uuid())
  name            String
  code            String     @unique
  credits         Int
  totalSemester   Int
  totalFees       Float
  currentStudents Int        @default(0)
  university      University @relation(fields: [universityId], references: [id])
  universityId    String
  users           User[]     @relation("UserCourses")
  applications    Application[]
  // semesters       Semester[] - will add later 
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("courses")
}
enum UserRole {
  USER
  STUDENT
  PROFESSOR
  ADMIN
  VERIFIER    // New role for manual verification
}

enum UserStatus {
  VERIFIED
  NOT_VERIFIED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ApplicationStatus {
  PENDING      // Just submitted, waiting for review
  UNDER_REVIEW // Being reviewed by verifier
  VERIFIED     // Approved by verifier
  REJECTED     // Rejected by verifier
  INCOMPLETE   // Missing documents or information
}

enum DocumentType {
  CLASS_10_MARKSHEET
  CLASS_12_MARKSHEET
  JEE_MAINS_SCORECARD
  PHOTO
  SIGNATURE
  IDENTITY_PROOF
  ADDRESS_PROOF
  CATEGORY_CERTIFICATE
  INCOME_CERTIFICATE
}

enum CoursePaymentStatus{
  VERIFIED
  NOT_VERIFIED
}

enum HostelPaymentStatus{
  VERIFIED
  NOT_VERIFIED
}

enum HostelType {
  AC
  NON_AC
}